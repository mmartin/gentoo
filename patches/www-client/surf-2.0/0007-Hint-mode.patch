From 311a28d5ab5010239333e26b24d02a7129a3dd7c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?M=C4=81rti=C5=86=C5=A1=20Ma=C4=8Ds?=
 <macs.martins@gmail.com>
Date: Tue, 18 Apr 2017 21:04:12 +0300
Subject: [PATCH 07/10] Hint mode

---
 surf.c | 80 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 75 insertions(+), 5 deletions(-)

diff --git a/surf.c b/surf.c
index d59abc7..3cf9642 100644
--- a/surf.c
+++ b/surf.c
@@ -44,7 +44,7 @@
 #define CSETV(p, s)             [p] = (Parameter){ { .v = s }, 1 }
 #define CSETF(p, s)             [p] = (Parameter){ { .f = s }, 1 }
 
-enum { AtomFind, AtomGo, AtomUri, AtomLast };
+enum { AtomFind, AtomGo, AtomUri, AtomHint, AtomLast };
 
 enum {
 	OnDoc   = WEBKIT_HIT_TEST_RESULT_CONTEXT_DOCUMENT,
@@ -140,6 +140,17 @@ typedef struct {
 	regex_t re;
 } SiteStyle;
 
+typedef enum {
+	JSCNone,
+	JSCHintMode,
+} JavaScriptCallback;
+
+typedef struct {
+	Client *c;
+	JavaScriptCallback cb;
+} JavaScriptCallbackUserData;
+
+
 /* Surf */
 static void usage(void);
 static void die(const char *errstr, ...);
@@ -166,7 +177,9 @@ static const char *getstyle(const char *uri);
 static void setstyle(Client *c, const char *stylefile);
 static void runscript(Client *c);
 static void runscriptarg(Client *c, const Arg *a);
-static void evalscript(Client *c, const char *jsstr, ...);
+static void evalscript(Client *c, JavaScriptCallback cb, const char *jsstr, ...);
+static void evalscriptcallback(GObject *object, GAsyncResult *result, gpointer user_data);
+static void hintmode(Client *c, const Arg *a);
 static void updatewinid(Client *c);
 static void handleplumb(Client *c, const char *uri);
 static void newwindow(Client *c, const Arg *a, int noembed);
@@ -279,6 +292,7 @@ setup(void)
 	atoms[AtomFind] = XInternAtom(dpy, "_SURF_FIND", False);
 	atoms[AtomGo] = XInternAtom(dpy, "_SURF_GO", False);
 	atoms[AtomUri] = XInternAtom(dpy, "_SURF_URI", False);
+	atoms[AtomHint] = XInternAtom(dpy, "_SURF_HINT", False);
 
 	gtk_init(NULL, NULL);
 
@@ -806,14 +820,14 @@ runscriptarg(Client *c, const Arg *a)
 	char *file = buildfile(a->v);
 
 	if (g_file_get_contents(file, &script, &l, NULL) && l)
-		evalscript(c, script);
+		evalscript(c, JSCNone, script);
 
 	g_free(script);
 	g_free(file);
 }
 
 void
-evalscript(Client *c, const char *jsstr, ...)
+evalscript(Client *c, JavaScriptCallback cb, const char *jsstr, ...)
 {
 	va_list ap;
 	gchar *script;
@@ -824,15 +838,64 @@ evalscript(Client *c, const char *jsstr, ...)
 
 	WebKitSettings *s = webkit_web_view_get_settings(c->view);
 	gboolean js = webkit_settings_get_enable_javascript(s);
+	JavaScriptCallbackUserData *user_data = malloc(sizeof(JavaScriptCallbackUserData));
+	user_data->c = c;
+	user_data->cb = cb;
 
 	webkit_settings_set_enable_javascript(s, TRUE);
-	webkit_web_view_run_javascript(c->view, script, NULL, NULL, NULL);
+	webkit_web_view_run_javascript(c->view, script, NULL, evalscriptcallback, (gpointer)user_data);
 	webkit_settings_set_enable_javascript(s, js);
 
 	g_free(script);
 }
 
 void
+evalscriptcallback(GObject *object, GAsyncResult *result, gpointer user_data_)
+{
+	WebKitJavascriptResult *js_result;
+	JSValueRef value;
+	JSGlobalContextRef context;
+	GError *error = NULL;
+	JavaScriptCallbackUserData *user_data = user_data_;
+
+	js_result = webkit_web_view_run_javascript_finish(WEBKIT_WEB_VIEW(object), result, &error);
+	if (!js_result) {
+		g_warning("Error running javascript: %s", error->message);
+		g_error_free(error);
+		free(user_data);
+		return;
+	}
+
+	context = webkit_javascript_result_get_global_context(js_result);
+	value = webkit_javascript_result_get_value(js_result);
+	switch (user_data->cb) {
+	case JSCHintMode:
+		if (JSValueIsNumber(context, value)) {
+			int n = JSValueToNumber(context, value, NULL);
+			if (n > 0) {
+				gchar *hints = g_strdup_printf("%d", n);
+				Arg a = SETPROP_VA("hint", hints);
+				spawn(user_data->c, &a);
+				g_free(hints);
+			}
+		} else {
+			g_warning("Error running javascript: unexpected return value");
+		}
+		break;
+	case JSCNone:
+		break;
+	}
+	webkit_javascript_result_unref(js_result);
+	free(user_data);
+}
+
+void
+hintmode(Client *c, const Arg *a_)
+{
+	evalscript(c, JSCHintMode, "hintMode()");
+}
+
+void
 updatewinid(Client *c)
 {
 	snprintf(winid, LENGTH(winid), "%lu", c->xid);
@@ -1138,6 +1201,13 @@ processx(GdkXEvent *e, GdkEvent *event, gpointer d)
 				loaduri(c, &a);
 
 				return GDK_FILTER_REMOVE;
+			} else if (ev->atom == atoms[AtomHint]) {
+				a.v = getatom(c, AtomHint);
+				if (strlen(a.v) > 0)
+					evalscript(c, JSCNone, "judgeHintNum(%s)", a.v);
+				else
+					evalscript(c, JSCNone, "removeHints()");
+				return GDK_FILTER_REMOVE;
 			}
 		}
 	}
-- 
2.10.2

